{"version":3,"sources":["images/apple.png","images/diamond.png","images/dice.png","images/feather.png","images/fire.png","images/heart.png","images/leaves.png","images/lips.png","images/shamrock.png","images/star.png","images/sun.png","images/window.png","components/Navbar/Navbar.js","components/clickPics/clickPics.js","components/Container/Container.js","components/Footer/Footer.js","components/Banner/Banner.js","images.js","components/ClickyGame.js","index.js"],"names":["module","exports","__webpack_require__","p","Navbar","props","react_default","a","createElement","className","navMsgColor","navMessage","score","highScore","clickPics","onClick","e","clickEvent","target","src","name","alt","Container","shake","images","map","i","components_clickPics_clickPics","key","Footer","Banner","apple","diamond","dice","feather","fire","heart","leaves","lips","shamrock","star","sun","window","ClickyGame","state","allImages","_this","shuffleArray","wasClicked","checkClicked","bind","Object","assertThisInitialized","newArr","Images","slice","shuffleArr","length","push","splice","Math","floor","random","clickedElem","_this2","this","prevState","shuffled","includes","setState","setTimeout","components_Navbar_Navbar","components_Banner_Banner","components_Container_Container","components_Footer_Footer","Component","ReactDOM","render","components_ClickyGame","document","getElementById"],"mappings":"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","file":"static/js/main.d23e2d31.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/apple.b7495777.png\";","module.exports = __webpack_public_path__ + \"static/media/diamond.99e0bdc0.png\";","module.exports = __webpack_public_path__ + \"static/media/dice.0a491d03.png\";","module.exports = __webpack_public_path__ + \"static/media/feather.abfaee8b.png\";","module.exports = __webpack_public_path__ + \"static/media/fire.22fd5381.png\";","module.exports = __webpack_public_path__ + \"static/media/heart.c8aa9fe9.png\";","module.exports = __webpack_public_path__ + \"static/media/leaves.2d6f9c6f.png\";","module.exports = __webpack_public_path__ + \"static/media/lips.69925988.png\";","module.exports = __webpack_public_path__ + \"static/media/shamrock.4111c022.png\";","module.exports = __webpack_public_path__ + \"static/media/star.19e9fb6b.png\";","module.exports = __webpack_public_path__ + \"static/media/sun.807ac109.png\";","module.exports = __webpack_public_path__ + \"static/media/window.47011aa9.png\";","import React from 'react';\nimport './Navbar.css';\n\nconst Navbar = props => (\n  <div className=\"navbar \">\n    <div>Clicky Game</div>\n    <div className={props.navMsgColor}>{props.navMessage}</div>\n    <div>\n      Score: {props.score} <span className=\"pipe\">|</span> High Score: {props.highScore}\n    </div>\n  </div>\n);\n\nexport default Navbar;\n","import React from 'react';\nimport './clickPics.css';\n\n// the onClick function is defined as a callback so that the clicked elements value\n// can be passed to props.clickEvent to check if the image has been clicked or not\nconst clickPics = props => (\n  <div className=\"card\" onClick={e => props.clickEvent(e.target.src)}>\n    <img className=\"card-img-top card-height\" src={props.name} alt=\"\" />\n  </div>\n);\n\nexport default clickPics;\n","import React from 'react';\nimport './Container.css';\nimport ClickPics from '../clickPics';\n\n// main container for each Image component\n// loops through each index in props.images, which contains an array of images\n// to create a new Image component for each image\n// attaches the passed down clickEvent function to each image component\nconst Container = props => (\n  // loops through\n  <div>\n    className={\n      props.shake\n        ? 'container d-flex flex-wrap justify-content-center shake'\n        : 'container d-flex flex-wrap justify-content-center'\n    }\n\n    {props.images.map((a, i) => <ClickPics name={a} key={i} clickEvent={props.clickEvent} />)}\n  </div>\n);\n\nexport default Container;\n","import React from 'react';\nimport './Footer.css';\n\nconst Footer = () => <div className=\"footer text-center\">Michael Dwyer</div>;\n\nexport default Footer;\n","import React from 'react';\nimport './Banner.css';\n\nconst Banner = () => (\n  <div className=\"banner text-center d-flex align-items-center justify-content-center\">\n    <p className=\"m-0\">Click on an image to earn points, but don't click on any images more than once!</p>\n  </div>\n);\n\nexport default Banner;\n","import apple from './images/apple.png';\nimport diamond from './images/diamond.png';\nimport dice from './images/dice.png';\nimport feather from './images/feather.png';\nimport fire from './images/fire.png';\nimport heart from './images/heart.png';\nimport leaves from './images/leaves.png';\nimport lips from './images/lips.png';\nimport shamrock from './images/shamrock.png';\nimport star from './images/star.png';\nimport sun from './images/sun.png';\nimport window from './images/window.png';\n\nconst images = [\n  apple,\n  diamond,\n  dice,\n  feather,\n  fire,\n  heart,\n  leaves,\n  lips,\n  shamrock,\n  star,\n  sun,\n  window\n];\n\nexport default images;","import React, { Component } from 'react';\nimport Navbar from './Navbar';\nimport Container from './Container';\nimport Footer from './Footer';\nimport Banner from './Banner';\nimport Images from '../images';\n\nclass ClickyGame extends Component {\n  state = {\n    score: 0,\n    highScore: 0,\n\n    // stores the class value to assign to navMessage based on a good or bad click\n    navMsgColor: '',\n\n    // contains intro, success, and failure message\n    navMessage: 'Click an image to begin!',\n\n    // contains an array of image urls\n    allImages: this.shuffleArray(),\n\n    // will track  each clicked element.\n    wasClicked: [],\n\n    // shakes the container on an incorrect guess if set to true\n    shake: false\n  };\n\n  // binds the current this context to checkClicked to have access to the current state\n  // when passed down to the Image component\n  clickEvent = this.checkClicked.bind(this);\n\n  // used to shuffle the array of images when the DOM loads, and when an image is clicked\n  shuffleArray() {\n    // creates a copy of the current Images array to modify it by value, and not by reference\n    const newArr = Images.slice();\n\n    // will store the shuffled array\n    const shuffleArr = [];\n\n    // each loop through an index gets spliced from newArr, reducing its length\n    // gets a random index based off the current length of newArr\n    // splices the value from newArr, and pushes it to shuffleArr\n    while (newArr.length > 0) {\n      shuffleArr.push(newArr.splice(Math.floor(Math.random() * newArr.length), 1)[0]);\n    }\n\n    return shuffleArr;\n  }\n\n  checkClicked(clickedElem) {\n    // creates a copy of the wasClicked array to modify it by value, and not by reference. wasClicked stores all previous clicked images\n    const prevState = this.state.wasClicked.slice();\n\n    // shuffles the images\n    const shuffled = this.shuffleArray();\n\n    // tracks score\n    let score = this.state.score;\n    let highScore = this.state.highScore;\n\n    // if the clicked item is not in wasClicked, then it hasn't been clicked and the score is increased\n    if (!this.state.wasClicked.includes(clickedElem)) {\n      // if score and highScore are the same, then there is a new highScore value\n      if (score === highScore) {\n        score++;\n        highScore++;\n\n        // if they are not equal, then only increase the score value\n      } else {\n        score++;\n      }\n\n      // adds the clicked item to wasClicked to track that it has been clicked\n      prevState.push(clickedElem);\n    }\n\n    // resets the current score if the same element was clicked twice\n    if (this.state.wasClicked.includes(clickedElem)) {\n      let score = 0;\n      return this.setState({\n        score: score,\n        highScore: highScore,\n        navMsgColor: 'incorrect',\n        navMessage: 'Incorrect guess!',\n        allImages: shuffled,\n        wasClicked: [],\n        shake: true\n      });\n    }\n\n    // if this runs, then the same element has not been clicked twice and the score is increased\n    this.setState({\n      score: score,\n      highScore: highScore,\n      navMsgColor: 'correct',\n      navMessage: 'You Guessed Correctly!',\n      allImages: shuffled,\n      wasClicked: prevState,\n      shake: false\n    });\n\n    // removes the green correct indicator on a successful click after .5s to re-render the class on each success\n    return setTimeout(() => this.setState({ navMsgColor: '' }), 500);\n  }\n\n  // renders score to the navbar.\n  // passes the randomized state.allImages array to Container to create an Image component for each image.\n  // passes the this.checkClicked down to container to pass to each Image component to be used for the click event.\n  render() {\n    const state = this.state;\n    return (\n      <div>\n        <Navbar\n          score={state.score}\n          highScore={state.highScore}\n          navMessage={state.navMessage}\n          navMsgColor={state.navMsgColor}\n        />\n        <Banner />\n        <Container\n          shake={state.shake}\n          images={state.allImages}\n          clickEvent={this.clickEvent}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default ClickyGame;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ClickyGame from './components/ClickyGame';\nimport './index.css';\n\nReactDOM.render(<ClickyGame />, document.getElementById('root'));\n"],"sourceRoot":""}